{"version":3,"sources":["components/SearchBox.tsx","components/Header.tsx","components/Button.tsx","components/LeftNav.tsx","components/ColorBox.tsx","components/ColorPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchBox","react_default","a","createElement","className","PureComponent","Header","this","props","title","src_components_SearchBox","Button","label","LeftNav","src_components_Button","link","ColorBox","style","background","colorCode","ColorPage","src_components_ColorBox","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","colors","undefined","_this2","axios","get","then","res","setState","data","console","log","catch","err","react_router_dom","src_components_Header","src_components_LeftNav","src_components_ColorPage","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a53ea3a.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport './SearchBox.scss';\n\ninterface Props {\n\n}\n\nclass SearchBox extends PureComponent {\n    render() {\n        return (\n            <div className='SearchBox'>\n                <input />\n            </div>\n        )\n    }\n}\n\nexport default SearchBox;","import React, { PureComponent } from 'react';\nimport * as PropTypes from 'prop-types';\nimport SearchBox from './SearchBox';\nimport './Header.scss'\n\ninterface Props {\n    title: string;\n}\n\nclass Header extends PureComponent<Props> {\n    static propTypes = {\n        title: PropTypes.string.isRequired,\n    }\n\n    render() {\n        return (\n            <div className='Header'>\n                <div className='Header-left'>\n                    <div className='Header-left-logo'>\n\n                    </div>\n                    <div className='Header-left-title'>\n                        {this.props.title}\n                    </div>\n                </div>\n                <div className='Header-right'>\n                    <SearchBox />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React, { PureComponent } from \"react\";\nimport './Button.scss';\n\ninterface Props {\n    label: string;\n    link: string;\n}\n\nclass Button extends PureComponent<Props> {\n    render() {\n        return (\n            <div className='Button'>\n                {this.props.label}\n            </div>\n        )\n    }\n}\n\nexport default Button;","import React, { PureComponent } from 'react';\nimport Button from './Button';\nimport './LeftNav.scss';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n\n}\n\nclass LeftNav extends PureComponent {\n    render() {\n        return (\n            <div className='LeftNav'>\n                <Button\n                    label='Random Color'\n                    link=''\n                />\n                <div className='LeftNav-colorLink'>\n                    Red\n                </div>\n                <div className='LeftNav-colorLink'>\n                    Orange\n                </div>\n                <div className='LeftNav-colorLink'>\n                    Yellow\n                </div>\n                <div className='LeftNav-colorLink'>\n                    Green\n                </div>\n                <div className='LeftNav-colorLink'>\n                    Blue\n                </div>\n                <div className='LeftNav-colorLink'>\n                    Purple\n                </div>\n                <div className='LeftNav-colorLink'>\n                    Brown\n                </div>\n                <div className='LeftNav-colorLink'>\n                    Gray\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LeftNav;","import React, { PureComponent } from \"react\";\nimport { checkPropTypes } from \"prop-types\";\nimport * as PropTypes from \"prop-types\";\nimport './ColorBox.scss';\n\ninterface Props {\n    colorCode: string;\n}\n\nclass ColorBox extends PureComponent<Props> {\n    static propTypes = {\n        colorCode: PropTypes.string.isRequired,\n    }\n\n    render() {\n        return (\n            <div className='ColorBox'>\n                <div\n                    className='ColorBox-color'\n                    style={{background:this.props.colorCode}}\n                />\n                <div className='ColorBox-label'>\n                    {this.props.colorCode}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ColorBox;","import React, { PureComponent } from \"react\";\nimport ColorBox from \"./ColorBox\";\nimport './ColorPage.scss';\n\ninterface Props {\n\n}\n\nclass ColorPage extends PureComponent<Props> {\n    render() {\n        return (\n            <div className='ColorPage'>\n                <ColorBox colorCode='#000000'/>\n                <ColorBox colorCode='#eeeeee'/>\n                <ColorBox colorCode='#aacc44'/>\n                \n                <ColorBox colorCode='#cffffa'/>\n                <ColorBox colorCode='#aa0000'/>\n                <ColorBox colorCode='#affff1'/>\n                \n                <ColorBox colorCode='#cf3ff1'/>\n                <ColorBox colorCode='#bffff1'/>\n                <ColorBox colorCode='#afaff1'/>\n            </div>\n        )\n    }\n}\n\nexport default ColorPage;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport axios from 'axios';\nimport Header from './components/Header';\nimport LeftNav from './components/LeftNav';\nimport ColorPage from './components/ColorPage';\nimport { BrowserRouter } from 'react-router-dom';\n\ninterface Props {\n\n}\ninterface State {\n  colors?: Color[];\n}\n\nexport interface Color {\n  hexCode: string,\n  colorType: string,\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      colors: undefined\n    }\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:4000/colors/')\n      .then((res) => {\n        this.setState({\n          colors: res.data\n        })\n        console.log('res', res.data)\n      })\n\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Header title='New Engen' />\n          <div className='App-body'>\n            <LeftNav />\n            <ColorPage />\n            <div>\n              {this.state.colors? this.state.colors.length : 5}\n            </div>\n          </div>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
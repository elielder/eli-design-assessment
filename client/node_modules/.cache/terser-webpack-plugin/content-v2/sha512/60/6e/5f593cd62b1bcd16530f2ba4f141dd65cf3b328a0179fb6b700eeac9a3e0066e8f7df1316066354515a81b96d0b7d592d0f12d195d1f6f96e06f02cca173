{"map":"{\"version\":3,\"sources\":[\"/Users/elielder/workspace/design-assessment/eli-design-assessment/src/App.tsx\",\"/Users/elielder/workspace/design-assessment/eli-design-assessment/src/serviceWorker.ts\",\"/Users/elielder/workspace/design-assessment/eli-design-assessment/src/index.tsx\"],\"names\":[\"App\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"callBackend\",\"asyncToGenerator\",\"regenerator_default\",\"a\",\"mark\",\"_callee\",\"response\",\"body\",\"wrap\",\"_context\",\"prev\",\"next\",\"console\",\"log\",\"fetch\",\"sent\",\"json\",\"status\",\"Error\",\"message\",\"abrupt\",\"stop\",\"state\",\"data\",\"_this2\",\"then\",\"res\",\"setState\",\"express\",\"catch\",\"err\",\"react_default\",\"createElement\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"oRAgEeA,qBAhDb,SAAAA,EAAYC,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACxBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaRQ,YAd0BN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KAcZ,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OACZC,QAAQC,IAAI,KADAJ,EAAAE,KAAA,EAEWG,MAAM,YAFjB,KAAA,EAAA,OAENR,EAFMG,EAAAM,KAGZH,QAAQC,IAAI,KACZD,QAAQC,IAAIP,GAJAG,EAAAE,KAAA,EAKOL,EAASU,OALhB,KAAA,EAAA,GAKNT,EALME,EAAAM,KAMZH,QAAQC,IAAI,KACZD,QAAQC,IAAI,MAAMP,GACM,MAApBA,EAASW,OARD,CAAAR,EAAAE,KAAA,GAAA,MAAA,MASVC,QAAQC,IAAI,KACNK,MAAMX,EAAKY,SAVP,KAAA,GAAA,OAAAV,EAAAW,OAAA,SAaLb,GAbK,KAAA,GAAA,IAAA,MAAA,OAAAE,EAAAY,SAAAhB,MAXZZ,EAAK6B,MAAQ,CACXC,KAAM,IAJgB9B,mFAQN,IAAA+B,EAAA5B,KAClBA,KAAKI,cACFyB,KAAK,SAAAC,GAAG,OAAIF,EAAKG,SAAS,CAAEJ,KAAMG,EAAIE,YACtCC,MAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,sCAoB5B,OACEC,EAAA5B,EAAA6B,cAAA,MAAA,KAAA,aAjCYC,EAAAA,YCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOT,EAAA5B,EAAA6B,cAACS,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport logo from './logo.svg';\\nimport './App.scss';\\nimport Header from './components/Header';\\nimport LeftNav from './components/LeftNav';\\nimport ColorPage from './components/ColorPage';\\nimport { BrowserRouter } from 'react-router-dom';\\n\\ninterface Props {\\n\\n}\\ninterface State {\\n  data: string;\\n}\\n\\nclass App extends Component<Props, State> {\\n  constructor(props: Props) {\\n    super(props);\\n\\n    this.state = {\\n      data: ''\\n    }\\n  }\\n\\n  componentDidMount() {\\n    this.callBackend()\\n      .then(res => this.setState({ data: res.express }))\\n      .catch(err => console.log(err));\\n  }\\n\\n  callBackend = async () => {\\n    console.log('1')\\n    const response = await fetch('/backend');\\n    console.log('2')\\n    console.log(response);\\n    const body = await response.json();\\n    console.log('3')\\n    console.log('res',response);\\n    if (response.status !== 200) {\\n      console.log('4')\\n      throw Error(body.message);\\n    }\\n\\n    return body;\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        hi\\n      </div>\\n      // <BrowserRouter>\\n      //   <div className=\\\"App\\\">\\n      //     <Header title='New Engen' />\\n      //     <div className='App-body'>\\n      //       <LeftNav />\\n      //       <ColorPage />\\n      //     </div>\\n      //   </div>\\n      // </BrowserRouter>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\ntype Config = {\\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\\n};\\n\\nexport function register(config?: Config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(\\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\\n      window.location.href\\n    );\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl: string, config?: Config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.scss';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{10:function(e,n,t){e.exports=t(20)},16:function(e,n,t){},19:function(e,n,t){},20:function(e,n,t){\"use strict\";t.r(n);var o=t(0),a=t.n(o),r=t(3),c=t.n(r),s=(t(16),t(1)),i=t.n(s),l=t(4),u=t(5),d=t(6),h=t(8),f=t(7),w=t(9),p=(t(19),function(e){function n(e){var t;return Object(u.a)(this,n),(t=Object(h.a)(this,Object(f.a)(n).call(this,e))).callBackend=Object(l.a)(i.a.mark(function e(){var n,t;return i.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return console.log(\"1\"),e.next=3,fetch(\"/backend\");case 3:return n=e.sent,console.log(\"2\"),console.log(n),e.next=8,n.json();case 8:if(t=e.sent,console.log(\"3\"),console.log(\"res\",n),200===n.status){e.next=14;break}throw console.log(\"4\"),Error(t.message);case 14:return e.abrupt(\"return\",t);case 15:case\"end\":return e.stop()}},e)})),t.state={data:\"\"},t}return Object(w.a)(n,e),Object(d.a)(n,[{key:\"componentDidMount\",value:function(){var e=this;this.callBackend().then(function(n){return e.setState({data:n.express})}).catch(function(e){return console.log(e)})}},{key:\"render\",value:function(){return a.a.createElement(\"div\",null,\"hi\")}}]),n}(o.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(a.a.createElement(p,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[10,1,2]]]);","extractedComments":[]}